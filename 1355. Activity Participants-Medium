SQL Schema:
Create table If Not Exists Friends (id int, name varchar(30), activity varchar(30));
Create table If Not Exists Activities (id int, name varchar(30));
Truncate table Friends;
insert into Friends (id, name, activity) values ('1', 'Jonathan D.', 'Eating');
insert into Friends (id, name, activity) values ('2', 'Jade W.', 'Singing');
insert into Friends (id, name, activity) values ('3', 'Victor J.', 'Singing');
insert into Friends (id, name, activity) values ('4', 'Elvis Q.', 'Eating');
insert into Friends (id, name, activity) values ('5', 'Daniel A.', 'Eating');
insert into Friends (id, name, activity) values ('6', 'Bob B.', 'Horse Riding');
Truncate table Activities;
insert into Activities (id, name) values ('1', 'Eating');
insert into Activities (id, name) values ('2', 'Singing');
insert into Activities (id, name) values ('3', 'Horse Riding');



Table: Friends
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| name          | varchar |
| activity      | varchar |
+---------------+---------+
id is the id of the friend and primary key for this table.
name is the name of the friend.
activity is the name of the activity which the friend takes part in.

Table: Activities
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| name          | varchar |
+---------------+---------+
id is the primary key for this table.
name is the name of the activity.


Write an SQL query to find the names of all the activities with neither maximum, nor minimum number of participants.
Return the result table in any order. Each activity in table Activities is performed by any person in the table Friends.
The query result format is in the following example:

Friends table:
+------+--------------+---------------+
| id   | name         | activity      |
+------+--------------+---------------+
| 1    | Jonathan D.  | Eating        |
| 2    | Jade W.      | Singing       |
| 3    | Victor J.    | Singing       |
| 4    | Elvis Q.     | Eating        |
| 5    | Daniel A.    | Eating        |
| 6    | Bob B.       | Horse Riding  |
+------+--------------+---------------+

Activities table:
+------+--------------+
| id   | name         |
+------+--------------+
| 1    | Eating       |
| 2    | Singing      |
| 3    | Horse Riding |
+------+--------------+

Result table:
+--------------+
| results      |
+--------------+
| Singing      |
+--------------+

Eating activity is performed by 3 friends, maximum number of participants, (Jonathan D. , Elvis Q. and Daniel A.)
Horse Riding activity is performed by 1 friend, minimum number of participants, (Bob B.)
Singing is performed by 2 friends (Victor J. and Jade W.)


Solution:
SELECT 		results
FROM 
(SELECT    results,
		       ranking,
           MAX(ranking) OVER() AS max_rank,
           MIN(ranking) OVER() AS min_rank
FROM
(SELECT   a.name AS results, 
          RANK() OVER(ORDER BY IFNULL(COUNT(DISTINCT b.name),0)) AS ranking
FROM      Activities a
LEFT JOIN Friends b
ON        a.name = b.activity
GROUP BY  a.name) AS c) AS d
WHERE	  ranking != max_rank  AND  ranking != min_rank;

Takeaway:
1. 用！=的时候注意区分 AND 和 OR ，如果要两个都不相等的话，用！= AND  ！= 连接
2. window function 不能在同一个select里面嵌套使用，譬如：不能在同一个select里面定义 ranking, max_rank, min_rank
3. winder funciton 中 () 里可以使用aggregate function, 如：RANK() OVER(ORDER BY IFNULL(COUNT(DISTINCT b.name),0)) AS ranking

CTE Solution:
WITH cte1 AS 
(SELECT   a.name AS results, 
          IFNULL(COUNT(DISTINCT b.name),0) AS num_people
FROM      Activities a
LEFT JOIN Friends b
ON        a.name = b.activity
GROUP BY  a.name) 
SELECT    results 
FROM      cte1
WHERE     num_people NOT IN 
(SELECT MAX(num_people) FROM cte1 UNION SELECT MIN(num_people) FROM cte1);


