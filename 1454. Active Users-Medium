SQL Schema:
Create table If Not Exists Accounts (id int, name varchar(10));
Create table If Not Exists Logins (id int, login_date date);
Truncate table Accounts;
insert into Accounts (id, name) values ('1', 'Winston');
insert into Accounts (id, name) values ('7', 'Jonathan');
Truncate table Logins;
insert into Logins (id, login_date) values ('7', '2020-05-30');
insert into Logins (id, login_date) values ('1', '2020-05-30');
insert into Logins (id, login_date) values ('7', '2020-05-31');
insert into Logins (id, login_date) values ('7', '2020-06-01');
insert into Logins (id, login_date) values ('7', '2020-06-02');
insert into Logins (id, login_date) values ('7', '2020-06-02');
insert into Logins (id, login_date) values ('7', '2020-06-03');
insert into Logins (id, login_date) values ('1', '2020-06-07');
insert into Logins (id, login_date) values ('7', '2020-06-10');


Table Accounts:
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| name          | varchar |
+---------------+---------+
the id is the primary key for this table.
This table contains the account id and the user name of each account.


Table Logins:
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| login_date    | date    |
+---------------+---------+
There is no primary key for this table, it may contain duplicates.
This table contains the account id of the user who logged in and the login date. A user may log in multiple times in the day.
Write an SQL query to find the id and the name of active users.

Active users are those who logged in to their accounts for 5 or more consecutive days.

Return the result table ordered by the id.

The query result format is in the following example:

Accounts table:
+----+----------+
| id | name     |
+----+----------+
| 1  | Winston  |
| 7  | Jonathan |
+----+----------+

Logins table:
+----+------------+
| id | login_date |
+----+------------+
| 7  | 2020-05-30 |
| 1  | 2020-05-30 |
| 7  | 2020-05-31 |
| 7  | 2020-06-01 |
| 7  | 2020-06-02 |
| 7  | 2020-06-02 |
| 7  | 2020-06-03 |
| 1  | 2020-06-07 |
| 7  | 2020-06-10 |
+----+------------+

Result table:
+----+----------+
| id | name     |
+----+----------+
| 7  | Jonathan |
+----+----------+
User Winston with id = 1 logged in 2 times only in 2 different days, so, Winston is not an active user.
User Jonathan with id = 7 logged in 7 times in 6 different days, five of them were consecutive days, so, Jonathan is an active user.

Follow up question:
Can you write a general solution if the active users are those who logged in to their accounts for n or more consecutive days?


Solution:
SELECT 	DISTINCT Accounts.id, Accounts.name
FROM       
(SELECT    a.id AS a_id, a.login_date, b.id AS b_id, c.id AS c_id, d.id AS d_id, e.id AS e_id
FROM      Logins a
LEFT JOIN Logins b
ON        a.id = b.id AND DATEDIFF(b.login_date, a.login_date) = 1
LEFT JOIN Logins c
ON        a.id = c.id AND DATEDIFF(c.login_date, a.login_date) = 2
LEFT JOIN Logins d
ON        a.id = d.id AND DATEDIFF(d.login_date, a.login_date) = 3
LEFT JOIN Logins e
ON        a.id = e.id AND DATEDIFF(e.login_date, a.login_date) = 4
WHERE     a.id IS NOT NULL AND b.id IS NOT NULL AND c.id IS NOT NULL AND d.id IS NOT NULL AND e.id IS NOT NULL) AS sub_1
INNER JOIN Accounts 
ON        sub_1.a_id = Accounts.id;


Takeaway: 
cannot have duplicate names in a table.


select *
from Accounts
where id in
    (select distinct t1.id
    from Logins as t1 inner join Logins as t2
    on t1.id = t2.id and datediff(t1.login_date, t2.login_date) between 1 and 4
    group by t1.id, t1.login_date
    having count(distinct(t2.login_date)) = 4)
order by id;
